.step(data-title='How it Works',
  data-file='src/main/java/com/twilio/authy2fa/servlet/RegistrationServlet.java')
  :markdown
    ## About this application

    This [Java Servlets](//docs.oracle.com/javaee/6/tutorial/doc/bnafd.html)
    sample application demonstrates two-factor authentication (2FA) using Authy.
    To run this sample app yourself, [download the code and follow the
    instructions on GitHub](https://github.com/TwilioDevEd/authy2fa-servlets).

    Adding two-factor authentication (2FA) to your web application increases the security of your user's
    data. [Multi-factor authentication](http://en.wikipedia.org/wiki/Multi-factor_authentication) 
    determines the identity of a user by validating once by logging into the app, 
    and then a second time with their mobile device using [Authy](https://www.twilio.com/authy).

    For the second factor, we will validate that the user has their mobile phone by either:

    * Sending them a OneTouch push notification to their mobile Authy app or
    * Sending them a token through their mobile Authy app or
    * Sending them a one-time token in a text message [sent with Authy via
    Twilio](http://www.authy.com/). Here's how this works at a high level:

    ![2FA High Level](//s3.amazonaws.com/howtodocs/2fa-high-level.png)

    Let's get started! Click the right arrow above to move to the next step of
    the tutorial.

    ---

    **See Also:**

    * [What is a Servlet](http://docs.oracle.com/javaee/6/tutorial/doc/bnafe.html)
    * [Authy overview](https://www.twilio.com/authy)

.step(data-title='Configuring Authy',
  data-file='src/main/java/com/twilio/authy2fa/servlet/RegistrationServlet.java',
  data-highlight="28")
  :markdown
    ## Configuring Authy

    If you haven't already, now is the time to [sign up for
    Authy](https://dashboard.authy.com/signup). Create your first application,
    naming it whatever you wish. After you create your application, your
    production API key will be visible on your
    [dashboard](https://dashboard.authy.com):

    ![Authy Dashboard](//s3.amazonaws.com/howtodocs/2fa-authy-dashboard.png)

    Once we have an Authy API key, we store it in this `.env` file, which helps
    us set the environment variables for our app.

    You'll also want to set a callback URL for your application in the OneTouch
    section of the Authy dashboard. See the project
    [README](https://github.com/TwilioDevEd/authy2fa-servlets) for more details.

    Now that we've configured our Java app, let's take a look at how we 
    register a user with Authy.

    ---

    **See Also:**

    * [Authy Java](//github.com/authy/authy-java/)
    * [Querying Environment Variables](//docs.oracle.com/javase/tutorial/essential/environment/env.html)

.step(data-file='src/main/java/com/twilio/authy2fa/servlet/RegistrationServlet.java',
  data-highlight="55-62")
  :markdown
    ## Registering a User with Authy

    When a new **user** signs up for our website, we call this controller, which
    handles saving our new _user_ to the database as well as registering the
    _user_ with [Authy](//www.authy.com/).

    All Authy needs to get a user set up for your application is the _email_,
    _phone number_ and _country code_. In order to do two-factor authentication,
    we need to make sure we ask for these things at the point of sign up.

    Once we register the user with Authy we can get the user's Authy id back. This is
    very important since it's how we will verify the identity of our User with
    Authy.

    ---

    **See Also:**

    * [Enabling a User with Authy](//docs.authy.com/totp.html#enabling-two-factor-authentication-for-a-user)
    * [JDBC Basics docs](//docs.oracle.com/javase/tutorial/jdbc/basics/index.html)

.step(data-file='src/main/java/com/twilio/authy2fa/servlet/authentication/LogInServlet.java',
  data-highlight='55, 63-70')
  :markdown
    ## Logging in with Authy OneTouch

    When a User attempts to log in to our website, we will ask them for a second
    form of identification. Let's take a look at OneTouch verification first.

    ![Authy OneTouch Approval](//howtodocs.s3.amazonaws.com/onetouch-approved.gif)

    OneTouch works like so:

    * We attempt to send a _OneTouch Approval Request_ for the _user_.
    * If the _user_ has OneTouch enabled, we will get a _success_ message back.
    * The _user_ hits 'Approve' in their Authy app.
    * Authy makes a POST request to our app with an **approved** status.
    * We log the _user_ in.

    In the next steps we'll look at how we handle cases where the **user** does
    not have OneTouch or denies the login request.

.step(data-file='src/main/java/com/twilio/authy2fa/servlet/authentication/LogInServlet.java',
  data-highlight='63-70')
  :markdown
    ## Sending the OneTouch Request

    When our _user_ logs in, we let the user decide which two-factor
    authentication provider will be used. It can be _Authy OneTouch_, _Authy
    SoftToken_ and finally an SMS token.

    Authy OneTouch will be used when the user has a registered OneTouch
    device.

    We create a wrapper for the OneTouch REST API, and we expose the method
    `sendApprovalRequest` to create an approval request wich takes 3 parameters:

    * The Authy _user ID_.
    * The _message_ that will be displayed in the device.
    * A _parameters_ object that contains the details specified on
    [Create ApprovalRequest](//docs.authy.com/onetouch.html#create-approvalrequest).

    Here is an example about how to build the _parameters_ object.
    ```javascript
    Parameters parameters = Parameters.builder()
      .addDetail("email", "alice@example.com")
      .addDetail("name", "Alice")
      .addHiddenDetail("phoneNumber", "555-5555")
      .build();
    ```

.step(data-file='src/main/java/com/twilio/authy2fa/servlet/authy/CallbackServlet.java',
  data-highlight='29-43')
  :markdown
    ## Configuring the OneTouch callback

    In order for our app to know what the _user_ did after we sent the
    OneTouch request, we need to register a callback endpoint with Authy.

    ![Authy OneTouch Callback](//howtodocs.s3.amazonaws.com/onetouch-callback-
    endpoint.png)

    **Note:** In order to verify that the request is coming from Authy, we've
    written the helper method `validate` that will halt the request if it
    appears it isn't coming from Authy.

    Here in our callback, we look up the _user_ using the _Authy ID_ sent with
    the Authy POST request. Ideally at this point we would probably use a
    websocket to let our client know that we received a response from Authy.
    However for this version we're going to keep it simple and just update the
    `AuthyStatus` on the User. Then all our client-side code needs to do is
    check for `user.AuthyStatus == "approved"` before logging her in.

    Let's take a look at the client-side code that will be handling this.

.step(data-file='src/main/webapp/javascript/application.js',
  data-highlight='35-44')
  :markdown
    ## Handle Two-Factor in the Browser

    We've already taken a look at what's happening on the server side, so let's
    step in front of the cameras and see how our JavaScript is interacting
    with those server endpoints.

    When we expect a OneTouch response, we will begin polling `/authy/status`
    until we see Authy status is not empty. Let's take a look at this controller
    and see what is happening.

    ---

    **See Also:**

    * [jQuery Post method](//api.jquery.com/jquery.post/)
    * [jQuery submit()](//api.jquery.com/submit/)

.step(data-file='src/main/java/com/twilio/authy2fa/servlet/authy/OneTouchStatusServlet.java',
  data-highlight='30-37')
  :markdown
    ## Check Login Status

    Here is the endpoint that our JavaScript is polling. It is waiting for the
    user authy status.

.step(data-file='src/main/java/com/twilio/authy2fa/servlet/authentication/ConfirmLogInServlet.java',
  data-highlight='30-58')
  :markdown
    ## Finish the 2FA Step

    If the `AuthyStatus` is **approved**, then the user will be redirected to the
    account page, otherwise we'll show the login form with a message that indicates
    the if the request was _denied_ or _unauthorized_.

.step
  :markdown
    ## Where to next?

    That's it! We've just implemented two-factor auth using three different
    methods and the latest in Authy technology.

    If you're a Java developer working with Twilio, you might enjoy these
    other tutorials:

    [**SMS and MMS Notifications**](//www.twilio.com/docs/tutorials/walkthrough/server-notifications/java/servlets)

    Faster than e-mail and less likely to get blocked, text messages are great
    for timely alerts and notifications. Learn how to send out SMS (and MMS)
    notifications to a list of server administrators.

    [**Click-To-Call**](//www.twilio.com/docs/tutorials/walkthrough/click-to-call/java/servlets)

    Click-to-call enables your company to convert web traffic into phone calls
    with the click of a button

    ### Did this help?

    Thanks for checking out this tutorial! If you have any feedback to share
    with us, we'd love to hear it. Tweet
    [@twilio](http://twitter.com/twilio) to let us know what you think.
